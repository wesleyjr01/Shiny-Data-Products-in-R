values = MyData['Ozone'][MyData['Month']==5]
values
values[complete.cases(values)]
values.max()
max(values)
maximum(values)
class(values)
max(values)
values
max(values[complete.cases(values)])
R.version.string
install.packages("swirl")
packageVersion("swirl")
library(swirl)
ls()
rm(list=ls())
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2 + 100
my_sqrt = sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div = my_sqrt/z
my_div <- my_sqrt/z
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,11)
c(1,2,3,4) + c(0,10,100)
z*2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files())
args(list.files)
old.dir = getwd()
old.dir <- getwd()
play()
getwd()
nxt()
dir.create('testdir')
setwd('C:\Users\wesle\OneDrive\Documents\testdir')
setwd('testdir')
getwd()
file.create('mytest.R')
ls()
list.files()
file.exists('mytest.R')
file.info('mytest.R')
play()
?file.rename
nxt()
file.rename('mytest.R','mytest2.R')
file.copy('mytest2.R','mytest3.R')
play()
file.path('mytest3.R')
file.path()
nxt()
file.path('mytest3.R')
play()
?file.path
nxt()
file.path('folder1','folder2')
play()
getwd()
nxt()
?dir.create
dir.create()
dir.create(C:\Users\wesle\OneDrive\Documents\testdir\testdir2\testdir3,recursive=TRUE)
dir.create(C:/Users/wesle/OneDrive/Documents/testdir/testdir2/testdir3,recursive=TRUE)
dir.create('C:\Users\wesle\OneDrive\Documents\testdir\testdir2\testdir3',recursive=TRUE)
dir.create('C:/Users/wesle/OneDrive/Documents/testdir/testdir2/testdir3',recursive=TRUE)
dir.create(file.path('testdir2','testdir'),recursive = TRUE)
dir.create(file.path('testdir2','testdir3'),recursive = TRUE)
play()
old.dir
getwd()
nxt()
setwd(old.dir)
1:20
play()
dir()
list.files()
remove('testdir2')
unlink(“testdir2“, recursive = TRUE)
unlink('testdir2', recursive = TRUE)
list.files()
list.dirs()
nxt()
pi:10
15:1
?':'
seq(1,20)
sq(0,10,by=0.5)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(-, times=40)
rep(0, times=40)
rep(c(0,1,2),times=10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c('My','name','is')
my_char
paste(my_char,collapse = ' ')
c(my_char,'Wesley')
my_name <- c(my_char,'Wesley')
my_name
paste(my_name,collapse = ' ')
paste('Hello','world!',sep = '')
paste('Hello','world!',sep = ' ')
paste(c('X','Y','Z'),1:3,collapse='')
paste(c('X','Y','Z'),1:3,sep='')
paste(1:3,c('X','Y','Z'),sep='')
paste(LETTERS,1:4,sep = '_')
paste(LETTERS,1:4,sep = "_")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x*3
y <-rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,4,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,Na)
vect2 <- c(11,2,NA)
names(vect2) <- c('foo','bar','norf')
identical(vect,vect2)
vect['bar']
vect[c('foo','bar')]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector <- c(4,5)
dim(my_vector) <- c(4,5)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,nrow = 4,ncol = 5)
identical(my_matrix,my_matrix2)
patients <- c('Bill','Gina','Kelly','Sean')
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c('patient','age','weight','bp','rating','test')
colnames(my_data) <- cnames
my_data
library()
library(swirl)
swirl()
x <- list(a=1:5, b=rnorm(10))
x
lapply(x, mean    )
x <- 1:4
lapply(x, runif, min=0, max=10)
sapply(x, runif, min=0, max=10)
a = sapply(x, runif, min=0, max=10)
type(a)
class(a)
class(a[1])
rm(list=ls())
x <- matrix(rnorm(200),20,10)
x
apply(x,2,mean)
apply(x,1,sm)
apply(x,1,sum)
rowsum(x)
?rowsum
x <- matrix(rnorm(200),20,10)
apply(x, 1, quantile, probs = c(.25,.75))
x <- c(rnorm(10),runif(10),rnorm(10,1))
x
f <- gl(3,10)
f
tapply(x,f,mean)
tapply(x,f,mean,simplify = FALSE)
tapply(x,f,range)
x <- c(rnorm(10),runif(10),rnorm(10,1))
f <- gl(3,10)
split(x,f)
x
lapply(split(x,f).mean)
lapply(split(x,f),mean)
library(datasets)
head(airquality)
airquality$Month
s <- split(airquality, airquality$Month)
s
lapply(s, function(x) colMeans(x[,c('Ozone','Solar.R','Wind')]))
sapply(s, function(x) colMeans(x[,c('Ozone','Solar.R','Wind')]))
sapply(s, function(x) colMeans(x[,c('Ozone','Solar.R','Wind')],na.rm = TRUE))
rm(list=ls())
x <-2
rm(ls())
rm(list = ls())
log(-1)
x <- 1
printmessage <- function(x){
if (x>0) {
print("x is greater than zero")
}
}
printmessage <- function(x){
if (x>0) {
print("x is greater than zero")
}
else{}
}
printmessage <- function(x){
if (x>0) {
print("x is greater than zero")
}
else{
print("x is less than or equal to zero")
}
}
printmessage <- function(x){
if (x>0) {
print("x is greater than zero")
}
else{
print("x is less than or equal to zero")
}
invisible(x)
}
printmessage <- function(x){
if (x>0) {
print("x is greater than zero")
}
else{
print("x is less than or equal to zero")
}
}
printmessage(1)
printmessage <- function(x){
if (x>0) {
print("x is greater than zero")
}
else{
print("x is less than or equal to zero")
}
}
printmessage(1)
printmessage <- function(x){
if (x>0) {
print("x is greater than zero")
}
else{
print("x is less than or equal to zero")
}
invisible(x)
}
printmessage(1)
rm(list = ls())
mean(x)
traceback()
lm(y-x)
traceback()
debug(lm)
lm(y-x)
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
play()
shape_mat$circles
shape_mat
shape_mat['circles']
nxt()
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
swirl()
sapply(flags, unique)
vapply(flags, unique, FUN.VALUE = numeric(1), ...)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
rm(list = ls())
library(datasets)
data("iris")
?iris
iris
mean(iris$Sepal.Length)
round(mean(iris$Sepal.Length),1)
as.integer(mean(iris$Sepal.Length))
library(datasets)
data("iris")
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
class(apply(iris[,1:4],2,mean))
data("mtcars")
head(mtcars)
?mtcars
tapply(mtcars$mpg, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
carvar = tapply(mtcars$hp, mtcars$cyl, mean)
varvar
carvar
carvar$4
class(carvar)
carvar[4]
carvar['4']
abs(carvar['4']-carvar['8'])
debug(ls)
iris
head(iris)
Q
undebug(ls)
Q
undebug(ls)
tapply(iris$Sepal.Lenght, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)['virginica']
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function(){
x
}
setmean <- function(mean) {
m <<- mean
}
getmean <- function() {
m
}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x = c(1,1,0,0,10,7,2)
x
makeVector(x)
var1 = makeVector(x)
y = c(0,10,-1,5,9,9)
var1$set(y)
var1$get()
var1$getmean()
var1$setmean(mean = mean(y))
var1$getmean()
var1$setmean(mean = NULL)
var1$getmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(var1)
cachemean(var1)
m <- matrix(1:10, nrow = 5, ncol = 2)
m
m <- matrix(1:9, nrow = 3, ncol = 3)
m
solve(m)
rnorm(10)
m <- matrix(rnorm(9), nrow = 3, ncol = 3)
solve(m)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function(){
x
}
setinv <- function(inverse) {
inv <<- inverse
}
getinv <- function() {
inv
}
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
m
ma <- makeCacheMatrix(x = m)
ma
ma$get()
ma$getinv()
ma$setinv(solve(m))
ma$getinv()
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
ma$setinv(NULL)
cacheSolve(ma)
cacheSolve(ma)
solve(m)
shiny::runApp('C:/R_Coursera/Course9_DataProducts/ProjectShiny/App01')
setwd("C:/R_Coursera/Course9_DataProducts/ProjectShiny/App01")
?builder
runApp('C:/R_Coursera/Course9_DataProducts/ProjectShiny/App02_htmlTags')
runApp('C:/R_Coursera/Course9_DataProducts/ProjectShiny/App03_SliderApp')
runApp('C:/R_Coursera/Course9_DataProducts/ProjectShiny/App03_SliderApp')
setwd('C:/R_Coursera/Course9_DataProducts/ProjectShiny')
setwd("C:/R_Coursera/Course9_DataProducts/ProjectShiny/Shiny_Part_1/App04_FirstPlot")
runApp()
setwd("C:/R_Coursera/Course9_DataProducts/ProjectShiny/Shiny_Part_2/HorsepowerMPG")
?sliderInput
?checkboxInput
?sliderInput
mtcars[1:10]
names(mtcars)
str(mtcars)
mtcars$mpgsp
runApp()
