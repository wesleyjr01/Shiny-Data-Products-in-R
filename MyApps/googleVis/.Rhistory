}
setmean <- function(mean) {
m <<- mean
}
getmean <- function() {
m
}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x = c(1,1,0,0,10,7,2)
x
makeVector(x)
var1 = makeVector(x)
y = c(0,10,-1,5,9,9)
var1$set(y)
var1$get()
var1$getmean()
var1$setmean(mean = mean(y))
var1$getmean()
var1$setmean(mean = NULL)
var1$getmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(var1)
cachemean(var1)
m <- matrix(1:10, nrow = 5, ncol = 2)
m
m <- matrix(1:9, nrow = 3, ncol = 3)
m
solve(m)
rnorm(10)
m <- matrix(rnorm(9), nrow = 3, ncol = 3)
solve(m)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function(){
x
}
setinv <- function(inverse) {
inv <<- inverse
}
getinv <- function() {
inv
}
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
m
ma <- makeCacheMatrix(x = m)
ma
ma$get()
ma$getinv()
ma$setinv(solve(m))
ma$getinv()
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
ma$setinv(NULL)
cacheSolve(ma)
cacheSolve(ma)
solve(m)
setwd("C:/R_Coursera/Course9_DataProducts/ProjectShiny/Shiny_Part_2/HorsepowerMPG")
shiny::runApp()
runApp()
setwd('C:\R_Coursera\Course9_DataProducts\ProjectShiny\Developing_Data_Products\Shiny_Part_2')
setwd('C:/R_Coursera/Course9_DataProducts/ProjectShiny/Developing_Data_Products/Shiny_Part_2')
runApp('C:/R_Coursera/Course9_DataProducts/ProjectShiny/Shiny_Part_2/app2')
setwd("C:/R_Coursera/Course9_DataProducts/ProjectShiny/Shiny_Part_2/app3")
?textInput
?tabPanel
runApp()
?textOutput
?plotOutput
?brushOpts
?plot
runApp('C:/R_Coursera/Course9_DataProducts/ProjectShiny/Shiny_Part_2/app4')
install.packages("rjson")
setwd('C:/R_Coursera/Course9_DataProducts/MyApps/app4')
# Print the result.
print(result)
# Print the result.
print(jsonfile)
library("rjson")
jsonfile <- fromJSON(file = "df_sale_floripa_apartments_brognoly.json")
print(jsonfile)
json_data_frame <- as.data.frame(result)
# Convert JSON file to a data frame.
json_data_frame <- as.data.frame(jsonfile)
?fromJSON
View(jsonfile)
View(jsonfile)
?as.data.frame
names(jsonfile)
json_data_frame <- as.data.frame(jsonfile. colnames = names(jsonfile))
json_data_frame <- as.data.frame(jsonfile, colnames = names(jsonfile))
json_data_frame <- as.data.frame(jsonfile, colnames = names(jsonfile), fix.empty.names=FALSE)
install.packages('jsonlite')
install.packages('jsonlite')
install.packages("jsonlite")
rm(list = ls())
library(jsonlite)
library(jsonlite)
jdata <- read_json("df_sale_floripa_apartments_brognoly.json", simplifyVector = TRUE)
View(jdata)
str(jdata)
data <- as.data.frame(jdata)
View(jdata)
jdata.URL
jdata$URL
fromJSON(jdata) %>% as.data.frame
jdata <- read_json("df_sale_floripa_apartments_brognoly.json", simplifyVector = FALSE)
View(jdata)
data <- as.data.frame(jdata)
View(jdata)
unlist(jdata)
mydf <- fromJSON(jdata)
mydf <- fromJSON("df_sale_floripa_apartments_brognoly.json")
View(mydf)
head(mydf)
mydf[0]
class(jdata$URL)
str(jdata$URL)
names(jdata)
names(jdata)[0]
names(jdata)[1]
name1 = names(jdata)[1]
name1
jdata$name1
jdata[name1]
jdata[1]
jdata[0]
df <- data.frame(names(jdata)[1] = jdata[1])
names(jdata)[1]
df <- data.frame(names(jdata)[1] = jdata[1])
names(jdata)[1]
class(names(jdata)[1])
class(jdata[1])
df <- data.frame( names(jdata)[1] = jdata[1] )
df <- data.frame( names(jdata)[1] = 1:5 )
names(jdata)[1]
df <- data.frame( "URL" = 1:5 )
class("URL")
class("names(jdata)[1]")
"URL"
df <- data.frame( names(jdata)[1] = 1:5 )
df <- data.frame( names(jdata)[1] = 1:5, stringsAsFactors = FALSE )
df <- data.frame( (names(jdata)[1]) = 1:5 )
df <- data.frame( var = 1:5 )
var <- names(jdata)[1]
df <- data.frame( var = 1:5 )
df <- data.frame( var = jdata[1] )
View(df)
names(df)
my.df[ , "new.col"] <- a.jdata[2]
my.df[ , "new.col"] <- jdata[2]
df[ , "new.col"] <- jdata[2]
View(df)
unlist(jdata)
nrow(jdata)
length(jdata)
length(jdata[1])
nrow(jdata[1])
jdata[1]
listNull2Na <- function(l) sapply(l, function(x) ifelse(is.null(x), NA, x))
l2 <- sapply(jdata, listNull2Na)
View(l2)
cols_per_row <- length(unlist(l2[1]))
cols_per_row
names(l2)
View(l2)
str(l2)
nrow(l2)
ncol(l2)
l2[,1]
data <- c(0.1, 0.2, 0.3, 0.3, 0.4, 0.5)
data
class(data)
dimnames <- list(time=c(0, 0.5, 1), name=c("C_0", "C_1"))
dimnames
names(dimnames)
mat <- matrix(data, ncol=2, nrow=3, dimnames=dimnames)
mat
mat2 <- matrix(l2, ncol=ncol(l2), nrow=nrow(l2), dimnames=names(jdata))
names(jdata)
class(names(jdata))
list(names(jdata))
class(list(names(jdata)))
mat2 <- matrix(l2, ncol=ncol(l2), nrow=nrow(l2), dimnames=list(names(jdata)) )
dimnames
rm(list = ls())
library("rjson")
jsonfile <- fromJSON(file = "df_sale_floripa_apartments_brognoly.json")
View(jsonfile)
class(jsonfile)
jsonfile.info()
jsonfile.summary()
?summary
summary(jsonfile)
dd  <-  as.data.frame(matrix(unlist(jsonfile), nrow=length(unlist(jsonfile[1]))))
View(dd)
jsonfile <- fromJSON(file = "df2_sale_floripa_apartments_brognoly.json")
View(jsonfile)
mytable<-read.csv("df2_sale_floripa_apartments_brognoly.csv",header=TRUE,stringsAsFactors=FALSE)
View(mytable)
mytable<-read.csv("df2_sale_floripa_apartments_brognoly.csv",header=TRUE
,stringsAsFactors=FALSE,locale = locale(encoding = "UTF-8"))
install.packages("readr")
mytable<-read.csv("df2_sale_floripa_apartments_brognoly.csv",header=TRUE
,stringsAsFactors=FALSE,encoding="UTF-8")
View(mytable)
class(mytable)
rm(list = ls())
df<-read.csv("df2_sale_floripa_apartments_brognoly.csv",header=TRUE
,stringsAsFactors=FALSE,encoding="UTF-8")
names(df)
df$Price.1000R..
df<-read.csv("df_sale_floripa_apartments_brognoly.csv",header=TRUE
,stringsAsFactors=FALSE,encoding="UTF-8")
df<-read.csv("df_sale_floripa_apartments_brognoly.csv",header=TRUE
,stringsAsFactors=FALSE,encoding="UTF-8")
df$Price_1000BRL
str(df$Price_1000BRL)
str(df)
shiny::runApp()
names(df)
runApp()
runApp()
max(df$Price_BRL)
runApp()
setwd('C:/Users/wesle/brognoly/brognoly/spiders')
setwd('C:/R_Coursera/Course9_DataProducts/MyApps/Shiny_Gadgets')
ls()
getwd()
library(miniUI)
devtools::install_github("rstudio/miniUI")
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
myFirstGadget()
stopApp(num1 * num2)
myFirstGadget()
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput(inputId = "num1",label = "First Number", choices = numbers1),
selectInput(inputId = "num2",label = "Second Number", choices = numbers2)
)
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server)
}
myFirstGadget()
myFirstGadget <- function(numbers1,numbers2) {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput(inputId = "num1",label = "First Number", choices = numbers1),
selectInput(inputId = "num2",label = "Second Number", choices = numbers2)
)
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server)
}
myFirstGadget()
library(shiny)
library(miniUI)
myFirstGadget <- function(numbers1, numbers2) {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput(inputId = "num1",label = "First Number", choices = numbers1),
selectInput(inputId = "num2",label = "Second Number", choices = numbers2)
)
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server)
}
myFirstGadget()
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
myFirstGadget()
myFirstGadget(1,2)
myFirstGadget(1:10,1:10)
?plot
library(shiny)
library(miniUI)
pickTrees <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput(outputId = "plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(x = trees$Girth, y = trees$Volume, main = "Trees!",
xlab = "Girth", ylab = "Volume")
})
# The Done button closes the app
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush,
xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
pickTrees()
names(trees)
?brushedPoints
names(df)
library(shiny)
library(shiny)
library(miniUI)
df<-read.csv("df_sale_floripa_apartments_brognoly.csv",header=TRUE
,stringsAsFactors=FALSE,encoding="UTF-8")
#Subset a Daframe by Brushing a plot
#This is very usefull to pick Outliers in a Data Analisys
pickTrees <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput(outputId = "plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(x = df$Area_m_2, y = df$Price_BRL, main = "Trees!",
xlab = "Area[m2]", ylab = "Price R$")
})
# The Done button closes the app
observeEvent(input$done, {
stopApp(brushedPoints(df = df, brush = input$brush,
xvar = "Area_m_2", yvar = "Price_BRL"))
})
}
runGadget(ui, server)
}
pickTrees()
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
names(df)
library(shiny)
library(miniUI)
library(dplyr)
df<-read.csv("df_sale_floripa_apartments_brognoly.csv",header=TRUE
,stringsAsFactors=FALSE,encoding="UTF-8")
df <- select(df,URL,Price_BRL,Dormitorios,Banheiros,Area_m_2,
Vagas_Garagem,neighborhood,latitude,longitude)
#Subset a Daframe by Brushing a plot
#This is very usefull to pick Outliers in a Data Analisys
pickTrees <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput(outputId = "plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(x = df$Area_m_2, y = df$Price_BRL, main = "Trees!",
xlab = "Area[m2]", ylab = "Price R$")
})
# The Done button closes the app
observeEvent(input$done, {
stopApp(brushedPoints(df = df, brush = input$brush,
xvar = "Area_m_2", yvar = "Price_BRL"))
})
}
runGadget(ui, server)
}
pickTrees()
select(df,URL,Price_BRL,Dormitorios,Banheiros,Area_m_2,
Vagas_Garagem,neighborhood,latitude,longitude)
library(dplyr)
install.packages("tidyverse")
library(tidyverse)
select(df,URL,Price_BRL,Dormitorios,Banheiros,Area_m_2,
Vagas_Garagem,neighborhood,latitude,longitude)
names(select(df,URL,Price_BRL,Dormitorios,Banheiros,Area_m_2,
Vagas_Garagem,neighborhood,latitude,longitude))
library(shiny)
library(miniUI)
library(tidyverse)
df<-read.csv("df_sale_floripa_apartments_brognoly.csv",header=TRUE
,stringsAsFactors=FALSE,encoding="UTF-8")
df <- select(df,URL,Price_BRL,Dormitorios,Banheiros,Area_m_2,
Vagas_Garagem,neighborhood,latitude,longitude)
#Subset a Daframe by Brushing a plot
#This is very usefull to pick Outliers in a Data Analisys
pickTrees <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput(outputId = "plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(x = df$Area_m_2, y = df$Price_BRL, main = "Trees!",
xlab = "Area[m2]", ylab = "Price R$")
})
# The Done button closes the app
observeEvent(input$done, {
stopApp(brushedPoints(df = df, brush = input$brush,
xvar = "Area_m_2", yvar = "Price_BRL"))
})
}
runGadget(ui, server)
}
pickTrees()
pickTrees()
suppressPackageStartupMessages(library(googleVis))
install.packages('googleVis')
suppressPackageStartupMessages(library(googleVis))
Fruits
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
View(M)
print(M,"chart")
plot(M)
plot(M)
rm(list = ls())
setwd('C:/R_Coursera/Course9_DataProducts/MyApps/googleVis')
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M)
print(M)
print(M,'chart')
print(M,"chart")
print(M)
print(M)
print(M)
print(M)
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M)
plot(M)
plot(M,'chart')
rm(list = ls())
getwd()
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
