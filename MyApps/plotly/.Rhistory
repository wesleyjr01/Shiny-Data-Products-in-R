lapply(s, function(x) colMeans(x[,c('Ozone','Solar.R','Wind')]))
sapply(s, function(x) colMeans(x[,c('Ozone','Solar.R','Wind')]))
sapply(s, function(x) colMeans(x[,c('Ozone','Solar.R','Wind')],na.rm = TRUE))
rm(list=ls())
x <-2
rm(ls())
rm(list = ls())
log(-1)
x <- 1
printmessage <- function(x){
if (x>0) {
print("x is greater than zero")
}
}
printmessage <- function(x){
if (x>0) {
print("x is greater than zero")
}
else{}
}
printmessage <- function(x){
if (x>0) {
print("x is greater than zero")
}
else{
print("x is less than or equal to zero")
}
}
printmessage <- function(x){
if (x>0) {
print("x is greater than zero")
}
else{
print("x is less than or equal to zero")
}
invisible(x)
}
printmessage <- function(x){
if (x>0) {
print("x is greater than zero")
}
else{
print("x is less than or equal to zero")
}
}
printmessage(1)
printmessage <- function(x){
if (x>0) {
print("x is greater than zero")
}
else{
print("x is less than or equal to zero")
}
}
printmessage(1)
printmessage <- function(x){
if (x>0) {
print("x is greater than zero")
}
else{
print("x is less than or equal to zero")
}
invisible(x)
}
printmessage(1)
rm(list = ls())
mean(x)
traceback()
lm(y-x)
traceback()
debug(lm)
lm(y-x)
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
play()
shape_mat$circles
shape_mat
shape_mat['circles']
nxt()
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
swirl()
sapply(flags, unique)
vapply(flags, unique, FUN.VALUE = numeric(1), ...)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
rm(list = ls())
library(datasets)
data("iris")
?iris
iris
mean(iris$Sepal.Length)
round(mean(iris$Sepal.Length),1)
as.integer(mean(iris$Sepal.Length))
library(datasets)
data("iris")
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
class(apply(iris[,1:4],2,mean))
data("mtcars")
head(mtcars)
?mtcars
tapply(mtcars$mpg, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
carvar = tapply(mtcars$hp, mtcars$cyl, mean)
varvar
carvar
carvar$4
class(carvar)
carvar[4]
carvar['4']
abs(carvar['4']-carvar['8'])
debug(ls)
iris
head(iris)
Q
undebug(ls)
Q
undebug(ls)
tapply(iris$Sepal.Lenght, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)['virginica']
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function(){
x
}
setmean <- function(mean) {
m <<- mean
}
getmean <- function() {
m
}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x = c(1,1,0,0,10,7,2)
x
makeVector(x)
var1 = makeVector(x)
y = c(0,10,-1,5,9,9)
var1$set(y)
var1$get()
var1$getmean()
var1$setmean(mean = mean(y))
var1$getmean()
var1$setmean(mean = NULL)
var1$getmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(var1)
cachemean(var1)
m <- matrix(1:10, nrow = 5, ncol = 2)
m
m <- matrix(1:9, nrow = 3, ncol = 3)
m
solve(m)
rnorm(10)
m <- matrix(rnorm(9), nrow = 3, ncol = 3)
solve(m)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function(){
x
}
setinv <- function(inverse) {
inv <<- inverse
}
getinv <- function() {
inv
}
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
m
ma <- makeCacheMatrix(x = m)
ma
ma$get()
ma$getinv()
ma$setinv(solve(m))
ma$getinv()
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
ma$setinv(NULL)
cacheSolve(ma)
cacheSolve(ma)
solve(m)
getwd()
setwd("C:/R_Coursera/Course9_DataProducts/MyApps/googleVis")
setwd("C:/R_Coursera/Course9_DataProducts/MyApps/googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
plot(M)
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
plot(G)
Exports
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=1000, height=800))
plot(G)
G2 <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=1000, height=800,region="150"))
print(G2,"chart")
plot(G2)
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
df
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
plot(Line)
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=1000, height=700
))
plot(Line)
G <- gvisGeoChart(Exports, "Country", "Profit",options=list(width=200, height=100))
T1 <- gvisTable(Exports,options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
GT <- gvisMerge(G,T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
plot(GTM)
CityPopularity
G4 <- gvisGeoChart(CityPopularity, locationvar='City', colorvar='Popularity',
options=list(region='US', height=350,
displayMode='markers',
colorAxis="{values:[200,400,600,800],
colors:[\'red', \'pink\', \'orange',\'green']}")
)
plot(G4)
Andrew
G5 <- gvisGeoChart(Andrew, "LatLong", colorvar='Speed_kt',
options=list(region="US"))
plot(G5)
G6 <- gvisGeoChart(Andrew, "LatLong", sizevar='Speed_kt',
colorvar="Pressure_mb", options=list(region="US"))
plot(G6)
require(stats)
data(quakes)
head(quakes)
quakes$latlong<-paste(quakes$lat, quakes$long, sep=":")
G7 <- gvisGeoChart(quakes, "latlong", "depth", "mag",
options=list(displayMode="Markers", region="009",
colorAxis="{colors:['red', 'grey']}",
backgroundColor="lightblue"))
plot(G7)
require(stats)
data(quakes)
head(quakes)
quakes$latlong<-paste(quakes$lat, quakes$long, sep=":")
G7 <- gvisGeoChart(quakes, "latlong", "depth", "mag",
options=list(displayMode="Markers",
colorAxis="{colors:['red', 'grey']}",
backgroundColor="lightblue"))
plot(G7)
require(stats)
data(quakes)
head(quakes)
quakes$latlong<-paste(quakes$lat, quakes$long, sep=":")
G7 <- gvisGeoChart(quakes, "latlong", "mag",
options=list(displayMode="Markers", region="009",
colorAxis="{colors:['red', 'grey']}",
backgroundColor="lightblue"))
plot(G7)
require(stats)
data(quakes)
head(quakes)
quakes$latlong<-paste(quakes$lat, quakes$long, sep=":")
G7 <- gvisGeoChart(quakes, "latlong", "depth",
options=list(displayMode="Markers", region="009",
colorAxis="{colors:['red', 'grey']}",
backgroundColor="lightblue"))
plot(G7)
require(stats)
data(quakes)
head(quakes)
quakes$latlong<-paste(quakes$lat, quakes$long, sep=":")
G7 <- gvisGeoChart(quakes, "latlong", "depth", "mag",
options=list(displayMode="Markers", region="009",
colorAxis="{colors:['red', 'grey']}",
backgroundColor="lightblue"))
plot(G7)
require(stats)
data(quakes)
head(quakes)
quakes$latlong<-paste(quakes$lat, quakes$long, sep=":")
G7 <- gvisGeoChart(quakes, "latlong", "depth", "mag",
)
plot(G7)
install.packages('plotly')
rm(list = ls())
setwd("C:/R_Coursera/Course9_DataProducts/MyApps/plotly")
mtcast
mtcars
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter")
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter")
library(plotly)
df<-read.csv("df_sale_floripa_apartments_brognoly.csv",header=TRUE
,stringsAsFactors=FALSE,encoding="UTF-8")
df<-read.csv("df_sale_floripa_apartments_brognoly.csv",header=TRUE
,stringsAsFactors=FALSE,encoding="UTF-8")
names(df)
table(df$neighborhood)
library(plotly)
plot_ly(df, x = ~Area_m_2, y = ~Price_BRL, type = "scatter", color = ~factor(neighborhood))
names(df)
plot_ly(df, x = ~Dormitorios, y = ~Price_BRL, type = "scatter", color = ~factor(neighborhood))
plot_ly(df, x = ~Banheiros, y = ~Price_BRL, type = "scatter", color = ~factor(neighborhood))
plot_ly(df, x = ~Vagas_Garagem, y = ~Price_BRL, type = "scatter", color = ~factor(neighborhood))
plot_ly(df, x = ~Area_m_2, y = ~Price_BRL, type = "scatter", color = ~factor(neighborhood))
plot_ly(df, x = ~Area_m_2, y = ~Price_BRL, type = "scatter",
color = ~factor(neighborhood), size = ~Area_m_2)
plot_ly(df, x = ~Dormitorios, y = ~Price_BRL, type = "scatter",
color = ~factor(neighborhood), size = ~Area_m_2)
plot_ly(df, x = ~Area_m_2, y = ~Price_BRL, type = "scatter",
color = ~factor(neighborhood), size = ~Area_m_2)
plot_ly(df, x = ~Dormitorios, y = ~Price_BRL, type = "scatter",
color = ~factor(neighborhood), size = ~Area_m_2)
df <- df[complete.cases(df), ] #Filter NA's rows
plot_ly(df, x = ~Area_m_2, y = ~Price_BRL, type = "scatter",
color = ~factor(neighborhood), size = ~Area_m_2)
plot_ly(df, x = ~Dormitorios, y = ~Price_BRL, type = "scatter",
color = ~factor(neighborhood), size = ~Area_m_2)
plot_ly(df, x = ~Area_m_2, y = ~Price_BRL, type = "scatter",
color = ~factor(neighborhood), size = ~Area_m_2)
plot_ly(df, x = ~Dormitorios, y = ~Price_BRL, type = "scatter",
color = ~factor(neighborhood), size = ~Area_m_2)
plot_ly(df, x = ~Banheiros, y = ~Price_BRL, type = "scatter",
color = ~factor(neighborhood), size = ~Area_m_2)
plot_ly(df, x = ~Vagas_Garagem, y = ~Price_BRL, type = "scatter",
color = ~factor(neighborhood), size = ~Area_m_2)
library(plotly)
df<-read.csv("df_sale_floripa_apartments_brognoly.csv",header=TRUE
,stringsAsFactors=FALSE,encoding="UTF-8")
df <- df[complete.cases(df), ] #Filter NA's rows
plot_ly(x = df$Price_BRL, type = "histogram")
setwd("C:/R_Coursera/Course9_DataProducts/MyApps/plotly/Histogram")
plot_ly(df, y = Price_BRL, color = neighborhood, type = "box")
plot_ly(df, y = df$Price_BRL, color = df$neighborhood, type = "box")
plot_ly(df, y = df$Price_BRL, color = df$Dormitorios, type = "box")
#BoxPlot
plot_ly(df, y = df$Price_BRL, color = df$neighborhood, type = "box")
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
library(shiny); runApp('C:/R_Coursera/Course9_DataProducts/Shiny_DataCamp/Chapter 1-2/TableWithFilter.R')
rm(list = ls())
library(plotly)
df<-read.csv("df_sale_floripa_apartments_brognoly.csv",header=TRUE
,stringsAsFactors=FALSE,encoding="UTF-8")
df <- df[complete.cases(df), ] #Filter NA's rows
setwd("C:/R_Coursera/Course9_DataProducts/MyApps/plotly/ScatterPlots")
df<-read.csv("df_sale_floripa_apartments_brognoly.csv",header=TRUE
,stringsAsFactors=FALSE,encoding="UTF-8")
df <- df[complete.cases(df), ] #Filter NA's rows
df<-read.csv("df_sale_floripa_apartments_brognoly.csv",header=TRUE
,stringsAsFactors=FALSE,encoding="UTF-8")
setwd('C:/R_Coursera/Course9_DataProducts/MyApps/plotly')
df<-read.csv("df_sale_floripa_apartments_brognoly.csv",header=TRUE
,stringsAsFactors=FALSE,encoding="UTF-8")
df <- df[complete.cases(df), ] #Filter NA's rows
Sys.setenv("plotly_username"="wesleyjr01")
Sys.setenv("plotly_api_key"="••••••••••")
p1 <- plot_ly(df, x = ~Area_m_2, y = ~Price_BRL, type = "scatter",
color = ~factor(neighborhood), size = ~Area_m_2)
p1
api_create(p1, filename = "Price_X_Area")
Sys.setenv("plotly_username"="wesleyjr01")
Sys.setenv("plotly_api_key"="HewFkTdVWhxkhtpWqVDy")
api_create(p1, filename = "Price_X_Area")
?plot_ly
p1 <- plot_ly(df, x = ~Area_m_2, y = ~Price_BRL, type = "scatter",
color = ~factor(neighborhood), size = ~Area_m_2, mode = "text")
p1
p1 <- plot_ly(df, x = ~Area_m_2, y = ~Price_BRL, type = "scatter",
color = ~factor(neighborhood), size = ~Area_m_2, mode = "markers")
p1
warnings()
Sys.setenv("plotly_username"="wesleyjr01")
Sys.setenv("plotly_api_key"="HewFkTdVWhxkhtpWqVDy")
api_create(p1, filename = "Price_X_Area")
Sys.setenv("plotly_username"="wesleyjr01")
Sys.setenv("plotly_api_key"="HewFkTdVWhxkhtpWqVDy")
api_create(p1, filename = "Price_X_Area")
View(df)
library(tidyverse)
df<-read.csv("df_sale_floripa_apartments_brognoly.csv",header=TRUE
,stringsAsFactors=FALSE,encoding="UTF-8")
df <- df[complete.cases(df), ] #Filter NA's rows
df <- select(df,URL,Price_BRL,Dormitorios,Banheiros,Area_m_2,
Vagas_Garagem,neighborhood,latitude,longitude)
p1 <- plot_ly(df, x = ~Area_m_2, y = ~Price_BRL, type = "scatter",
color = ~factor(neighborhood), size = ~Area_m_2, mode = "markers")
Sys.setenv("plotly_username"="wesleyjr01")
Sys.setenv("plotly_api_key"="HewFkTdVWhxkhtpWqVDy")
api_create(p1, filename = "Price_X_Area")
plot_ly(df, x = ~Dormitorios, y = ~Price_BRL, type = "scatter",
color = ~factor(neighborhood), size = ~Area_m_2)
plot_ly(df, x = ~Banheiros, y = ~Price_BRL, type = "scatter",
color = ~factor(neighborhood), size = ~Area_m_2)
plot_ly(df, x = ~Vagas_Garagem, y = ~Price_BRL, type = "scatter",
color = ~factor(neighborhood), size = ~Area_m_2)
library(plotly)
df<-read.csv("df_sale_floripa_apartments_brognoly.csv",header=TRUE
,stringsAsFactors=FALSE,encoding="UTF-8")
df <- df[complete.cases(df), ] #Filter NA's rows
#Histogram
plot_ly(x = df$Price_BRL, type = "histogram")
